# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OpenTripPlannerPlugin
                                 A QGIS plugin
 This plugin makes OpenTripPlanner functionalities accessible in QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-10-21
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Mario KÃ¶nigbauer
        email                : mkoenigb@hm.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from PyQt5.QtNetwork import  QNetworkAccessManager, QNetworkRequest
from PyQt5.QtCore import *
from qgis.core import *
from qgis.utils import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .otp_plugin_dialog import OpenTripPlannerPluginDialog
from osgeo import ogr
import os.path
import urllib.request
import urllib
import os
import zipfile



class OpenTripPlannerPlugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'OpenTripPlannerPlugin_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&OpenTripPlanner Plugin')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('OpenTripPlannerPlugin', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/otp_plugin/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'OpenTripPlanner Plugin'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&OpenTripPlanner Plugin'),
                action)
            self.iface.removeToolBarIcon(action)
 
    # https://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/settings.html 
    def store_variables(self):
        s = QgsSettings()
        s.setValue("otp_plugin/GeneralSettings_ServerURL", "http://localhost:8080/otp/routers/test/")
        #s.setValue("otp_plugin/myint",  10)
        #s.setValue("otp_plugin/myreal", 3.14)
        #Just testing stuff below...
        #print(s)
        self.iface.messageBar().pushMessage(
        "Success", "Function store_variables! Var: ",
        level=Qgis.Success, duration=3)   
    def read_variables(self):
        s = QgsSettings()
        ServerURL = s.value("myplugin/mytext", "http://localhost:8080/otp/routers/test/")
        #myint  = s.value("myplugin/myint", 123)
        #myreal = s.value("myplugin/myreal", 2.71)
        #nonexistent = s.value("myplugin/nonexistent", None)
        print(mytext)
        print(myint)
        print(myreal)
        print(nonexistent)
  
    # Open File Dialog when
    def select_output_folder(self):
        #foldername, _filter = QFileDialog.getExistingDirectory(self.dlg, "Open Directory","",ShowDirsOnly)
        filename, _filter = QFileDialog.getSaveFileName(self.dlg, "Select output file ","", '*.*')
        self.dlg.GeneralSettings_SavePath.setText(filename)

    def Isochrones_RequestIsochrones(self, isochrones_selectedLayer, Isochrones_Inputlayer_Fieldnames):     
        #isochrones_selectedLayer = iface.activeLayer() #Uses the currently selected layer in layerslist from qgis browser but we will use the one from isochrones_maplayerselection bzw. QgsMapLayerComboBox
        
        # clear vars and stuff
        isochrone_url = None
        Isochrones_Error = None
        r = None
        Inputlayer_outFeat = None
        
        # initialize vars and stuff
        isochrone_uid_counter = 0
        isochrone_id_counter = 0
        
        # Setting up Override Button context
        ctx = QgsExpressionContext(QgsExpressionContextUtils.globalProjectLayerScopes(isochrones_selectedLayer)) #This context will be able to evaluate global, project, and layer variables
        
        # Preparing Features
        Inputlayer_Features = isochrones_selectedLayer.getFeatures()
        
        # Create the Vectorlayer
        Isochrones_Memorylayer_VL = QgsVectorLayer("MultiPolygon?crs=epsg:4326", "Isochrones", "memory") # Create temporary polygon layer (output file)
        Isochrones_Memorylayer_PR = Isochrones_Memorylayer_VL.dataProvider() # No idea what pr stands for, just copied this name from all the examples on the web... probably provider??
        Isochrones_Memorylayer_VL.startEditing() # Enter editing mode
        Isochrones_Memorylayer_PR.addAttributes([QgsField("Isochrone_Time",QVariant.Int),QgsField("Isochrone_UID", QVariant.Int),QgsField("Isochrone_ID", QVariant.Int),QgsField("Isochrone_Error", QVariant.String),QgsField("Isochrone_URL", QVariant.String)]) # Add Error and URL Field to outputlayer        
        Isochrones_Memorylayer_PR.addAttributes(isochrones_selectedLayer.fields()) # Copy all fieldnames of inputlayer to outputlayer  
        Inputlayer_NumberOfFields = isochrones_selectedLayer.fields().count() # count number of fields in inputlayer
        Inputlayer_outFeat = QgsFeature() # set QgsFeature
        
        
        # Savelocation
        otp_plugin_location = os.path.realpath(os.path.join(os.getcwd(), os.path.dirname(__file__))) #Read path of this plugin
        tmp_save_location = os.path.join(otp_plugin_location, 'temp_files\\')  #Concat path of this plugin to save location of temporary shapefiles

        # General Settings
        ServerURL = 'https://api.digitransit.fi/routing/v1/routers/hsl/' #self.dlg.GeneralSettings_ServerURL.toPlainText()        
 
        #Preparing Transformation to WGS 84
        sourceCrs = QgsCoordinateReferenceSystem(isochrones_selectedLayer.crs().authid()) # Read CRS of input layer
        destCrs = QgsCoordinateReferenceSystem("EPSG:4326") # and set destination CRS to WGS 84 (OTP can only understand EPSG:4326) 
        tr = QgsCoordinateTransform(sourceCrs, destCrs, QgsProject.instance()) # Setting up transformation
        
        for Inputlayer_Feature in Inputlayer_Features:
            # Initial Variables
            Isochrones_Error = 'Success: No Error' # Empty the error var
                
            # retrieve every feature with its geometry and attributes
            print("Feature ID: ", Inputlayer_Feature.id())
            
            # Override Button Feature
            ctx.setFeature(Inputlayer_Feature) #Setting context to current feature
            
            # Feature Geometry
            geom = Inputlayer_Feature.geometry() # fetch geometry of current feature
            geom.transform(tr) # Transform geometry to WGS 84 (We prepared this outside the loop)
            pointgeom = geom.asPoint() #Read Point geometry
            x = round(pointgeom.x(),8) #Read X-Value
            y = round(pointgeom.y(),8) #Read Y-Value
            print("PointX: ", x, " | PointY: ", y)
            
            # Feature Attributes
            Inputlayer_Attributes = Inputlayer_Feature.attributes() # fetch attributes
            print(str(Inputlayer_Attributes)) # attrs is a list. It contains all the attribute values of this feature
            
            # Copy Attributes to outputlayer
            Inputlayer_outFeat.setAttributes(Inputlayer_Feature.attributes()) # set the attributes
            #print (Inputlayer_Attributes[0])
            
            
            #Check where to gather attributes from: GUI or Layer? 
            #WalkSpeed
            if self.dlg.Isochrones_WalkSpeed_Use.isChecked() == True: # Check if option shall be used                
                if self.dlg.Isochrones_WalkSpeed_Override.isActive() == True: # Check if override button shall be used
                    Isochrones_WalkSpeed_Value, IrrelevantSuccessStorage = self.dlg.Isochrones_WalkSpeed_Override.toProperty().value(ctx) #Receiving Value from Layer or GUI: DataDefinedOverride (Reference: https://gis.stackexchange.com/a/350279/107424 and https://gis.stackexchange.com/a/350993/107424)
                else:
                    Isochrones_WalkSpeed_Value = self.dlg.Isochrones_WalkSpeed.value() # Receiving Value from GUI: QDoubleSpinBox
                if Isochrones_WalkSpeed_Value is not None: # Check if received value is NULL
                    Isochrones_WalkSpeed_MS = float(Isochrones_WalkSpeed_Value) * 0.27777777777778 # Convert float and km/h to m/s
                    Isochrones_WalkSpeed_URLstring = '&walkSpeed=' + str(round(Isochrones_WalkSpeed_MS,6)) # Concatenate to URL string if option is used and value is not NULL
                else:
                    Isochrones_WalkSpeed_URLstring = '' # Leave URL string empty if value is NULL (Empty, not NULL!!)
            else:
                Isochrones_WalkSpeed_URLstring = '' # Leave URL string empty if option is not used (Empty, not NULL!!)
 
            #BikeSpeed
            if self.dlg.Isochrones_BikeSpeed_Use.isChecked() == True: # Check if option shall be used                
                if self.dlg.Isochrones_BikeSpeed_Override.isActive() == True: # Check if override button shall be used
                    Isochrones_BikeSpeed_Value, IrrelevantSuccessStorage = self.dlg.Isochrones_BikeSpeed_Override.toProperty().value(ctx) #Receiving Value from Layer or GUI: DataDefinedOverride (Reference: https://gis.stackexchange.com/a/350279/107424 and https://gis.stackexchange.com/a/350993/107424)
                else:
                    Isochrones_BikeSpeed_Value = self.dlg.Isochrones_BikeSpeed.value() # Receiving Value from GUI: QDoubleSpinBox
                if Isochrones_BikeSpeed_Value is not None: # Check if received value is NULL
                    Isochrones_BikeSpeed_MS = float(Isochrones_BikeSpeed_Value) * 0.27777777777778 # Convert float and km/h to m/s
                    Isochrones_BikeSpeed_URLstring = '&bikeSpeed=' + str(round(Isochrones_BikeSpeed_MS,6)) # Concatenate to URL string if option is used and value is not NULL
                else:
                    Isochrones_BikeSpeed_URLstring = '' # Leave URL string empty if value is NULL (Empty, not NULL!!)
            else:
                Isochrones_BikeSpeed_URLstring = '' # Leave URL string empty if option is not used (Empty, not NULL!!)

            #Date
            if self.dlg.Isochrones_Date_Use.isChecked() == True: # Check if option shall be used                
                if self.dlg.Isochrones_Date_Override.isActive() == True: # Check if override button shall be used
                    Isochrones_Date_Value, IrrelevantSuccessStorage = self.dlg.Isochrones_Date_Override.toProperty().value(ctx) #Receiving Value from Layer or GUI: DataDefinedOverride (Reference: https://gis.stackexchange.com/a/350279/107424 and https://gis.stackexchange.com/a/350993/107424)
                else:
                    Isochrones_Date_Value = self.dlg.Isochrones_Date.date().toString("yyyy-MM-dd") # Receiving Value from GUI: QDateEdit
                if Isochrones_Date_Value is not None: # Check if received value is NULL
                    Isochrones_Date_URLstring = '&date=' + str(Isochrones_Date_Value) # Concatenate to URL string if option is used and value is not NULL
                else:
                    Isochrones_Date_URLstring = '' # Leave URL string empty if value is NULL (Empty, not NULL!!)
            else:
                Isochrones_Date_URLstring = '' # Leave URL string empty if option is not used (Empty, not NULL!!)
                
            #Time
            if self.dlg.Isochrones_Time_Use.isChecked() == True: # Check if option shall be used                
                if self.dlg.Isochrones_Time_Override.isActive() == True: # Check if override button shall be used
                    Isochrones_Time_Value, IrrelevantSuccessStorage = self.dlg.Isochrones_Time_Override.toProperty().value(ctx) #Receiving Value from Layer or GUI: DataDefinedOverride (Reference: https://gis.stackexchange.com/a/350279/107424 and https://gis.stackexchange.com/a/350993/107424)
                else:
                    Isochrones_Time_Value = self.dlg.Isochrones_Time.time().toString("HH:mm:ss") # Receiving Value from GUI: QTimeEdit
                if Isochrones_Time_Value is not None: # Check if received value is NULL
                    Isochrones_Time_URLstring = '&time=' + str(Isochrones_Time_Value) # Concatenate to URL string if option is used and value is not NULL
                else:
                    Isochrones_Time_URLstring = '' # Leave URL string empty if value is NULL (Empty, not NULL!!)
            else:
                Isochrones_Time_URLstring = '' # Leave URL string empty if option is not used (Empty, not NULL!!)
                
            #ArriveBy
            if self.dlg.Isochrones_ArriveBy_Use.isChecked() == True: # Check if option shall be used                
                if self.dlg.Isochrones_ArriveBy_Override.isActive() == True: # Check if override button shall be used
                    Isochrones_ArriveBy_Value, IrrelevantSuccessStorage = self.dlg.Isochrones_ArriveBy_Override.toProperty().value(ctx) #Receiving Value from Layer or GUI: DataDefinedOverride (Reference: https://gis.stackexchange.com/a/350279/107424 and https://gis.stackexchange.com/a/350993/107424)
                else:
                    Isochrones_ArriveBy_Value = self.dlg.Isochrones_ArriveBy.isChecked() # Receiving Value from GUI: QCheckBox
                if Isochrones_ArriveBy_Value is not None: # Check if received value is NULL
                    Isochrones_ArriveBy_URLstring = '&arriveBy=' + str(Isochrones_ArriveBy_Value) # Concatenate to URL string if option is used and value is not NULL
                else:
                    Isochrones_ArriveBy_URLstring = '' # Leave URL string empty if value is NULL (Empty, not NULL!!)
            else:
                Isochrones_ArriveBy_URLstring = '' # Leave URL string empty if option is not used (Empty, not NULL!!)
                
            #Wheelchair
            if self.dlg.Isochrones_Wheelchair_Use.isChecked() == True: # Check if option shall be used                
                if self.dlg.Isochrones_Wheelchair_Override.isActive() == True: # Check if override button shall be used
                    Isochrones_Wheelchair_Value, IrrelevantSuccessStorage = self.dlg.Isochrones_Wheelchair_Override.toProperty().value(ctx) #Receiving Value from Layer or GUI: DataDefinedOverride (Reference: https://gis.stackexchange.com/a/350279/107424 and https://gis.stackexchange.com/a/350993/107424)
                else:
                    Isochrones_Wheelchair_Value = self.dlg.Isochrones_Wheelchair.isChecked() # Receiving Value from GUI: QCheckBox
                if Isochrones_Wheelchair_Value is not None: # Check if received value is NULL
                    Isochrones_Wheelchair_URLstring = '&arriveBy=' + str(Isochrones_Wheelchair_Value) # Concatenate to URL string if option is used and value is not NULL
                else:
                    Isochrones_Wheelchair_URLstring = '' # Leave URL string empty if value is NULL (Empty, not NULL!!)
            else:
                Isochrones_Wheelchair_URLstring = '' # Leave URL string empty if option is not used (Empty, not NULL!!)
                
            #WaitReluctance
            if self.dlg.Isochrones_WaitReluctance_Use.isChecked() == True: # Check if option shall be used                
                if self.dlg.Isochrones_WaitReluctance_Override.isActive() == True: # Check if override button shall be used
                    Isochrones_WaitReluctance_Value, IrrelevantSuccessStorage = self.dlg.Isochrones_WaitReluctance_Override.toProperty().value(ctx) #Receiving Value from Layer or GUI: DataDefinedOverride (Reference: https://gis.stackexchange.com/a/350279/107424 and https://gis.stackexchange.com/a/350993/107424)
                else:
                    Isochrones_WaitReluctance_Value = self.dlg.Isochrones_WaitReluctance.value() # Receiving Value from GUI: QDoubleSpinBox
                if Isochrones_WaitReluctance_Value is not None: # Check if received value is NULL
                    Isochrones_WaitReluctance_Float = round(float(Isochrones_WaitReluctance_Value),2)
                    Isochrones_WaitReluctance_URLstring = '&waitReluctance=' + str(Isochrones_WaitReluctance_Float) # Concatenate to URL string if option is used and value is not NULL
                else:
                    Isochrones_WaitReluctance_URLstring = '' # Leave URL string empty if value is NULL (Empty, not NULL!!)
            else:
                Isochrones_WaitReluctance_URLstring = '' # Leave URL string empty if option is not used (Empty, not NULL!!)
                
            #MaxTransfers
            if self.dlg.Isochrones_MaxTransfers_Use.isChecked() == True: # Check if option shall be used                
                if self.dlg.Isochrones_MaxTransfers_Override.isActive() == True: # Check if override button shall be used
                    Isochrones_MaxTransfers_Value, IrrelevantSuccessStorage = self.dlg.Isochrones_MaxTransfers_Override.toProperty().value(ctx) #Receiving Value from Layer or GUI: DataDefinedOverride (Reference: https://gis.stackexchange.com/a/350279/107424 and https://gis.stackexchange.com/a/350993/107424)
                else:
                    Isochrones_MaxTransfers_Value = self.dlg.Isochrones_MaxTransfers.value() # Receiving Value from GUI: QSpinBox
                if Isochrones_MaxTransfers_Value is not None: # Check if received value is NULL
                    Isochrones_MaxTransfers_URLstring = '&maxTransfers=' + str(Isochrones_MaxTransfers_Value) # Concatenate to URL string if option is used and value is not NULL
                else:
                    Isochrones_MaxTransfers_URLstring = '' # Leave URL string empty if value is NULL (Empty, not NULL!!)
            else:
                Isochrones_MaxTransfers_URLstring = '' # Leave URL string empty if option is not used (Empty, not NULL!!)
             
            #MaxWalkDistance
            if self.dlg.Isochrones_MaxWalkDistance_Use.isChecked() == True: # Check if option shall be used                
                if self.dlg.Isochrones_MaxWalkDistance_Override.isActive() == True: # Check if override button shall be used
                    Isochrones_MaxWalkDistance_Value, IrrelevantSuccessStorage = self.dlg.Isochrones_MaxWalkDistance_Override.toProperty().value(ctx) #Receiving Value from Layer or GUI: DataDefinedOverride (Reference: https://gis.stackexchange.com/a/350279/107424 and https://gis.stackexchange.com/a/350993/107424)
                else:
                    Isochrones_MaxWalkDistance_Value = self.dlg.Isochrones_MaxWalkDistance.value() # Receiving Value from GUI: QSpinBox
                if Isochrones_MaxWalkDistance_Value is not None: # Check if received value is NULL
                    Isochrones_MaxWalkDistance_URLstring = '&maxWalkDistance=' + str(Isochrones_MaxWalkDistance_Value) # Concatenate to URL string if option is used and value is not NULL
                else:
                    Isochrones_MaxWalkDistance_URLstring = '' # Leave URL string empty if value is NULL (Empty, not NULL!!)
            else:
                Isochrones_MaxWalkDistance_URLstring = '' # Leave URL string empty if option is not used (Empty, not NULL!!)
             
            #MaxOffroadDistance
            if self.dlg.Isochrones_MaxOffroadDistance_Use.isChecked() == True: # Check if option shall be used                
                if self.dlg.Isochrones_MaxOffroadDistance_Override.isActive() == True: # Check if override button shall be used
                    Isochrones_MaxOffroadDistance_Value, IrrelevantSuccessStorage = self.dlg.Isochrones_MaxOffroadDistance_Override.toProperty().value(ctx) #Receiving Value from Layer or GUI: DataDefinedOverride (Reference: https://gis.stackexchange.com/a/350279/107424 and https://gis.stackexchange.com/a/350993/107424)
                else:
                    Isochrones_MaxOffroadDistance_Value = self.dlg.Isochrones_MaxOffroadDistance.value() # Receiving Value from GUI: QSpinBox
                if Isochrones_MaxOffroadDistance_Value is not None: # Check if received value is NULL
                    Isochrones_MaxOffroadDistance_URLstring = '&offRoadDistanceMeters=' + str(Isochrones_MaxOffroadDistance_Value) # Concatenate to URL string if option is used and value is not NULL
                else:
                    Isochrones_MaxOffroadDistance_URLstring = '' # Leave URL string empty if value is NULL (Empty, not NULL!!)
            else:
                Isochrones_MaxOffroadDistance_URLstring = '' # Leave URL string empty if option is not used (Empty, not NULL!!)
             
            #PrecisionMeters
            if self.dlg.Isochrones_PrecisionMeters_Use.isChecked() == True: # Check if option shall be used                
                if self.dlg.Isochrones_PrecisionMeters_Override.isActive() == True: # Check if override button shall be used
                    Isochrones_PrecisionMeters_Value, IrrelevantSuccessStorage = self.dlg.Isochrones_PrecisionMeters_Override.toProperty().value(ctx) #Receiving Value from Layer or GUI: DataDefinedOverride (Reference: https://gis.stackexchange.com/a/350279/107424 and https://gis.stackexchange.com/a/350993/107424)
                else:
                    Isochrones_PrecisionMeters_Value = self.dlg.Isochrones_PrecisionMeters.value() # Receiving Value from GUI: QSpinBox
                if Isochrones_PrecisionMeters_Value is not None: # Check if received value is NULL
                    Isochrones_PrecisionMeters_URLstring = '&precisionMeters=' + str(Isochrones_PrecisionMeters_Value) # Concatenate to URL string if option is used and value is not NULL
                else:
                    Isochrones_PrecisionMeters_URLstring = '' # Leave URL string empty if value is NULL (Empty, not NULL!!)
            else:
                Isochrones_PrecisionMeters_URLstring = '' # Leave URL string empty if option is not used (Empty, not NULL!!)                   

            #Isochrones Interval
            if self.dlg.Isochrones_Interval_Override.isActive() == True:
                Isochrones_Interval_Value, IrrelevantSuccessStorage = self.dlg.Isochrones_Interval_Override.toProperty().value(ctx) #Receiving Value from Layer or GUI: DataDefinedOverride (Reference: https://gis.stackexchange.com/a/350279/107424 and https://gis.stackexchange.com/a/350993/107424)
            else:
                Isochrones_Interval_Value = self.dlg.Isochrones_Interval.toPlainText() #Receiving Value from GUI: QTextEdit
            if not Isochrones_Interval_Value: # Check if it is NULL
                Isochrones_Interval_Value = '60, 120, 180,240,300' # Make sure cutoffSec is not empty because it is a must have parameter   
            Isochrones_Interval_Value = Isochrones_Interval_Value.replace(" ", "")  # Remove whitespaces in case user entered them              
            Interval_list = list(Isochrones_Interval_Value.split(",")) # Split given Integers (as string) separated by comma into a list
            Isochrones_Interval_URLstring = "&cutoffSec=".join(Interval_list) #Join the list to a string and add leading "&cutoffSec=" to each Integer. The first item of the list will get no leading "&cutoffSec=", we will add this later

            #Transportation Mode
            if self.dlg.Isochrones_TransportationMode_Override.isActive() == True:
                Isochrones_TransportationMode_Value, IrrelevantSuccessStorage = self.dlg.Isochrones_TransportationMode_Override.toProperty().value(ctx) #Receiving Value from Layer or GUI: DataDefinedOverride (Reference: https://gis.stackexchange.com/a/350279/107424 and https://gis.stackexchange.com/a/350993/107424)
            else:
                Isochrones_TransportationMode_Value = self.dlg.Isochrones_TransportationMode.toPlainText() #Receiving Value from GUI: QTextEdit
            if not Isochrones_TransportationMode_Value: # Check if it is NULL
                Isochrones_TransportationMode_Value = 'WALK,TRANSIT' # Make sure Mode is not empty because it is a must have parameter
            Isochrones_TransportationMode_URLstring = "&mode=" + Isochrones_TransportationMode_Value.upper() # Make sure Mode is given as uppercase to prevent possible server errors (not sure how otp handels this exactly)
            
            #Additional Parameters
            if self.dlg.Isochrones_AdditionalParameters_Override.isActive() == True:
                Isochrones_AdditionalParameters_Value, IrrelevantSuccessStorage = self.dlg.Isochrones_AdditionalParameters_Override.toProperty().value(ctx) #Receiving Value from Layer or GUI: DataDefinedOverride (Reference: https://gis.stackexchange.com/a/350279/107424 and https://gis.stackexchange.com/a/350993/107424)
            else:
                Isochrones_AdditionalParameters_Value = self.dlg.Isochrones_AdditionalParameters.toPlainText() #Receiving Value from GUI: QTextEdit
            if Isochrones_AdditionalParameters_Value is not None: # If Additional Parameters are filled, use it
                Isochrones_AdditionalParameters_URLstring = str(Isochrones_AdditionalParameters_Value) # Create the string
            else: # If Additional Parameters are not filled, do not use it
                Isochrones_AdditionalParameters_URLstring = '' # Create the string (Empty, because it is not used, not NULL!!)
                
            #Example URL: http://localhost:8080/otp/routers/ttc/isochrone?fromPlace=43.637,-79.434&mode=WALK,TRANSIT&date=11-14-2017&time=8:00am&maxWalkDistance=500&cutoffSec=1800&cutoffSec=3600
            #https://api.digitransit.fi/routing/v1/routers/hsl/isochrone?fromPlace=60.169,24.938&mode=WALK,TRANSIT&date=11-14-2017&time=8:00am&maxWalkDistance=500&cutoffSec=1800&cutoffSec=3600
            #Concat URL and convert to string
            isochrone_url = (str(ServerURL) + "isochrone?algorithm=accSampling" + # Add Isochrones request and algorithm to server url
                            "&fromPlace=" + str(y) + "," + str(x) + # concatenate x and y coordinates as string
                            Isochrones_TransportationMode_URLstring + #
                            Isochrones_WalkSpeed_URLstring + #
                            Isochrones_BikeSpeed_URLstring + #
                            Isochrones_Date_URLstring + #
                            Isochrones_Time_URLstring + #
                            Isochrones_ArriveBy_URLstring + #
                            Isochrones_Wheelchair_URLstring + #
                            Isochrones_WaitReluctance_URLstring + #
                            Isochrones_MaxTransfers_URLstring + #
                            Isochrones_MaxWalkDistance_URLstring + #
                            Isochrones_MaxOffroadDistance_URLstring + #
                            Isochrones_PrecisionMeters_URLstring + #
                            Isochrones_AdditionalParameters_URLstring + # Additional Parameters entered as OTP-Readable string -> User responsibility
                            "&cutoffSec=" + str(Isochrones_Interval_URLstring) # Interval-Integers are taken as comma separated string, then split into list and then joined to string with leading "&cutoffSec=". The first interval therefore has no leading "&cutoffSec=" thats why we add it here
                            )
                          
            #create url
            #Working example: https://api.digitransit.fi/routing/v1/routers/hsl/isochrone?fromPlace=60.169,24.938&mode=WALK,TRANSIT&date=2019-11-01&time=08:00:00&maxWalkDistance=500&cutoffSec=1800&cutoffSec=3600
            isochrone_url = isochrone_url #'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql'
            
            #use lokal shp for testing to avoid bombing the server with requests :)
            #request and download file
            try:
                isochrone_headers = {"accept":"application/x-zip-compressed"}
                isochrone_request = urllib.request.Request(isochrone_url, headers=isochrone_headers)
                isochrone_response = urllib.request.urlopen(isochrone_request)
                #r = requests.get(isochrone_url, headers={"accept":"application/x-zip-compressed"}, proxies=urllib.request.getproxies()) # Sending request to server. Using shapefiles to avoid invalid geometries on high level of detail + geojson throwback seems to be limited to 4 decimals.
            except:
                Isochrones_Error = 'Error: Request failed' 
                print(Isochrones_Error)
            
            #save file
            try:                
                with open(tmp_save_location + 'isochrones.zip', 'wb') as f: # Write shapefile to temp location
                    f.write(isochrone_response.read())
                    #f.write(r.content) # write zip content
            except:
                Isochrones_Error = 'Error: Failed to write response .zip archive to harddrive'
                print(Isochrones_Error)
                
            #unzip file
            try:
                with zipfile.ZipFile(tmp_save_location + 'isochrones.zip', 'r') as zip_ref:
                    zip_ref.extractall(tmp_save_location) 
            except:
                Isochrones_Error = 'Error: unzipping response failed (likely because response not valid)'
                print(Isochrones_Error)
   
            #load file
            #tmp_isochrone_shapefile = iface.addVectorLayer(tmp_save_location + "null.shp", "null", "ogr") #no need to add layer to canvas
            try:
                isochrone_responseLayer = QgsVectorLayer(tmp_save_location + "null.shp", "null", "ogr") # load just downloaded file as vector layer
            except:
                Isochrones_Error = 'Error: loading response null.shp failed'
                print(Isochrones_Error)
            
            #get features of file
            Isochrone_Features = isochrone_responseLayer.getFeatures() # get features of just downloaded isochrone
            if not isochrone_responseLayer.isValid():
                Isochrones_Error = 'Error: response file is not valid'
                print(Isochrones_Error)
       
            #iterate trough isochrone
            isochrone_id_counter = isochrone_id_counter + 1
            for Isochrone_Feature in Isochrone_Features:
                isochrone_uid_counter = isochrone_uid_counter + 1
                Isochrones_Memorylayer_PR.addFeature(Isochrone_Feature) # copy features of responselayer including geometry and attributes (it is always only one attribute) to new layer
                attrs_isochrone = { 1 : isochrone_uid_counter, 2 : isochrone_id_counter, 3 : Isochrones_Error , 4 : isochrone_url } # set further generic attributes
                Isochrones_Memorylayer_PR.changeAttributeValues({ Isochrone_Feature.id() : attrs_isochrone }) # change attribute values of new layer to the just set ones
                for i in range(0, Inputlayer_NumberOfFields): # iterate over new layer as many fields as the input layer has
                    attrs_inputlayer = { i + 5 : Inputlayer_Attributes[i] } # set attributes of inputlayer (+5 because we added 5 new fields before)
                    Isochrones_Memorylayer_PR.changeAttributeValues({ Isochrone_Feature.id() : attrs_inputlayer }) # change attribute values of new layer to the ones from inputlayer 
                Isochrones_Memorylayer_VL.updateFields() # make sure to fetch changes from the provider

               
            #except:
            #Isochrones_Error = 'Error: Invalid response file' 

                    
            #Just testing stuff...
            #print(self.dlg.Isochrones_WalkSpeed_Override.vectorLayer())
            #print(isochrone_url)
            #self.iface.messageBar().pushMessage(
            #"Success", "Function Isochrones_RequestIsochrones run! URL: " + isochrone_url + " - " + str(Isochrones_Inputlayer_Fieldnames) + str(isochrones_selectedLayer) + str(self.dlg.Isochrones_WalkSpeed_Override.vectorLayer()) + ' ' + str(Isochrones_Error),
            #level=Qgis.Success, duration=3) 

            # Retrieve HTTP meta-data
            #print(r.status_code)
            #print(r.headers['content-type'])
            #print(r.encoding)
            #requeststatuscode = str(r.status_code)
            #requestheader = str(r.headers['content-type'])
            #requestencoding = str(r.encoding)
            #responseheader = str('response is not defined - does not work')       
            #self.iface.messageBar().pushMessage(
            #"Success", "HTTP GET Request via Python requests: " + "requeststatus: " + requeststatuscode + " requestheader: " + requestheader + " requestencoding: " + requestencoding + " responseheader: " + responseheader + " url: " + url,
            #level=Qgis.Success, duration=3) 
            
      
        #END OF LOOP
        
        # Isochrones Memory VectorLayer
        Isochrones_Memorylayer_VL.commitChanges() # Commit changes
        QgsProject.instance().addMapLayer(Isochrones_Memorylayer_VL)# Show in project
               

                            
            
    def isochrones_maplayerselection(self): # Outsourcing layerselection to this function to avoid repeading the same code everywhere (Reference: https://gis.stackexchange.com/a/225659/107424)
        layers = QgsProject.instance().layerTreeRoot().children() # Fetch available layers
        self.dlg.Isochrones_SelectInputLayer.setFilters(QgsMapLayerProxyModel.PointLayer) # Filter out all layers except Point layers
        self.isochrones_selectedLayer = self.dlg.Isochrones_SelectInputLayer.currentLayer() # Using the currently selected layer in QgsMapLayerComboBox as selectedLayer
        isochrones_selectedLayer = self.isochrones_selectedLayer # I could just replace all isochrones_selectedLayer variables by self.isochrones_selectedLayer which would actually make more sense, but got lost in search and replace ending up in a mess...
        self.Isochrones_Inputlayer_Fieldnames = [field.name() for field in isochrones_selectedLayer.fields()] # Receive Isochrones_Inputlayer_Fieldnames from selected layer
        
        # Setting up QgsOverrideButtons (Reference: https://gis.stackexchange.com/a/350993/107424). Has to be done here, so they get updated when the layer selection has changed...
        #WalkSpeed
        self.dlg.Isochrones_WalkSpeed_Override.registerExpressionContextGenerator(isochrones_selectedLayer) # will allow the use of global, project, and layer variables.
        self.dlg.Isochrones_WalkSpeed_Override.init(0, QgsProperty(), QgsPropertyDefinition("walkSpeed", "Walk Speed in km/h", QgsPropertyDefinition.DoublePositive), isochrones_selectedLayer, False) # Need to tell the button which kind of property it expects. This is done by calling the init function of the button. This function expects a QgsPropertyDefinition
        #BikeSpeed
        self.dlg.Isochrones_BikeSpeed_Override.registerExpressionContextGenerator(isochrones_selectedLayer) # will allow the use of global, project, and layer variables.
        self.dlg.Isochrones_BikeSpeed_Override.init(0, QgsProperty(), QgsPropertyDefinition("bikeSpeed", "Bike Speed in km/h", QgsPropertyDefinition.DoublePositive), isochrones_selectedLayer, False) # Need to tell the button which kind of property it expects. This is done by calling the init function of the button. This function expects a QgsPropertyDefinition
        #Date
        self.dlg.Isochrones_Date_Override.registerExpressionContextGenerator(isochrones_selectedLayer) # will allow the use of global, project, and layer variables.
        self.dlg.Isochrones_Date_Override.init(0, QgsProperty(), QgsPropertyDefinition("Date", "Date in YYYY-MM-DD", QgsPropertyDefinition.String), isochrones_selectedLayer, False) # Need to tell the button which kind of property it expects. This is done by calling the init function of the button. This function expects a QgsPropertyDefinition
        #Time
        self.dlg.Isochrones_Time_Override.registerExpressionContextGenerator(isochrones_selectedLayer) # will allow the use of global, project, and layer variables.
        self.dlg.Isochrones_Time_Override.init(0, QgsProperty(), QgsPropertyDefinition("Time", "Time in HH:MM:SS", QgsPropertyDefinition.String), isochrones_selectedLayer, False) # Need to tell the button which kind of property it expects. This is done by calling the init function of the button. This function expects a QgsPropertyDefinition
        #ArriveBy
        self.dlg.Isochrones_ArriveBy_Override.registerExpressionContextGenerator(isochrones_selectedLayer) # will allow the use of global, project, and layer variables.
        self.dlg.Isochrones_ArriveBy_Override.init(0, QgsProperty(), QgsPropertyDefinition("ArriveBy", "ArriveBy as Boolean", QgsPropertyDefinition.Boolean), isochrones_selectedLayer, False) # Need to tell the button which kind of property it expects. This is done by calling the init function of the button. This function expects a QgsPropertyDefinition
        #Wheelchair
        self.dlg.Isochrones_Wheelchair_Override.registerExpressionContextGenerator(isochrones_selectedLayer) # will allow the use of global, project, and layer variables.
        self.dlg.Isochrones_Wheelchair_Override.init(0, QgsProperty(), QgsPropertyDefinition("Wheelchair", "Wheelchair as Boolean", QgsPropertyDefinition.Boolean), isochrones_selectedLayer, False) # Need to tell the button which kind of property it expects. This is done by calling the init function of the button. This function expects a QgsPropertyDefinition
        #WaitReluctance
        self.dlg.Isochrones_WaitReluctance_Override.registerExpressionContextGenerator(isochrones_selectedLayer) # will allow the use of global, project, and layer variables.
        self.dlg.Isochrones_WaitReluctance_Override.init(0, QgsProperty(), QgsPropertyDefinition("WaitReluctance", "Wait Reluctance Factor as Double", QgsPropertyDefinition.Double), isochrones_selectedLayer, False) # Need to tell the button which kind of property it expects. This is done by calling the init function of the button. This function expects a QgsPropertyDefinition
        #MaxTransfers
        self.dlg.Isochrones_MaxTransfers_Override.registerExpressionContextGenerator(isochrones_selectedLayer) # will allow the use of global, project, and layer variables.
        self.dlg.Isochrones_MaxTransfers_Override.init(0, QgsProperty(), QgsPropertyDefinition("MaxTransfers", "Maximum Transfers as Integer", QgsPropertyDefinition.IntegerPositive), isochrones_selectedLayer, False) # Need to tell the button which kind of property it expects. This is done by calling the init function of the button. This function expects a QgsPropertyDefinition
        #MaxWalkDistance
        self.dlg.Isochrones_MaxWalkDistance_Override.registerExpressionContextGenerator(isochrones_selectedLayer) # will allow the use of global, project, and layer variables.
        self.dlg.Isochrones_MaxWalkDistance_Override.init(0, QgsProperty(), QgsPropertyDefinition("MaxWalkDistance", "Maximum Walk Distance in Meters", QgsPropertyDefinition.IntegerPositive), isochrones_selectedLayer, False) # Need to tell the button which kind of property it expects. This is done by calling the init function of the button. This function expects a QgsPropertyDefinition
        #MaxOffroadDistance
        self.dlg.Isochrones_MaxOffroadDistance_Override.registerExpressionContextGenerator(isochrones_selectedLayer) # will allow the use of global, project, and layer variables.
        self.dlg.Isochrones_MaxOffroadDistance_Override.init(0, QgsProperty(), QgsPropertyDefinition("MaxOffroadDistance", "Maximum Offroad Distance in Meters", QgsPropertyDefinition.IntegerPositive), isochrones_selectedLayer, False) # Need to tell the button which kind of property it expects. This is done by calling the init function of the button. This function expects a QgsPropertyDefinition
        #PrecisionMeters
        self.dlg.Isochrones_PrecisionMeters_Override.registerExpressionContextGenerator(isochrones_selectedLayer) # will allow the use of global, project, and layer variables.
        self.dlg.Isochrones_PrecisionMeters_Override.init(0, QgsProperty(), QgsPropertyDefinition("PrecisionMeters", "Level of Detail in Meters", QgsPropertyDefinition.IntegerPositiveGreaterZero), isochrones_selectedLayer, False) # Need to tell the button which kind of property it expects. This is done by calling the init function of the button. This function expects a QgsPropertyDefinition
        #Interval
        self.dlg.Isochrones_Interval_Override.registerExpressionContextGenerator(isochrones_selectedLayer) # will allow the use of global, project, and layer variables.
        self.dlg.Isochrones_Interval_Override.init(0, QgsProperty(), QgsPropertyDefinition("Interval", "Isochrones Interval in Seconds as String using Integer Values separated by Comma", QgsPropertyDefinition.String), isochrones_selectedLayer, False) # Need to tell the button which kind of property it expects. This is done by calling the init function of the button. This function expects a QgsPropertyDefinition
        #TransportationMode
        self.dlg.Isochrones_TransportationMode_Override.registerExpressionContextGenerator(isochrones_selectedLayer) # will allow the use of global, project, and layer variables.
        self.dlg.Isochrones_TransportationMode_Override.init(0, QgsProperty(), QgsPropertyDefinition("TransportationMode", "TransportationMode as String separated by Comma", QgsPropertyDefinition.String), isochrones_selectedLayer, False) # Need to tell the button which kind of property it expects. This is done by calling the init function of the button. This function expects a QgsPropertyDefinition
        #AdditionalParameters
        self.dlg.Isochrones_AdditionalParameters_Override.registerExpressionContextGenerator(isochrones_selectedLayer) # will allow the use of global, project, and layer variables.
        self.dlg.Isochrones_AdditionalParameters_Override.init(0, QgsProperty(), QgsPropertyDefinition("AdditionalParameters", "Additional Parameters as String", QgsPropertyDefinition.String), isochrones_selectedLayer, False) # Need to tell the button which kind of property it expects. This is done by calling the init function of the button. This function expects a QgsPropertyDefinition
                        
        
    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = OpenTripPlannerPluginDialog()
            self.isochrones_maplayerselection() # Calling maplayer selection on first startup to load layers into QgsMapLayerComboBox and initialize QgsOverrideButton stuff so selections can be done without actually using the QgsMapLayerComboBox (related to currentIndexChanged.connect(self.isochrones_maplayerselection) below)
            
        # Calling Functions to update layer stuff when layerselection has changed
        self.dlg.Isochrones_SelectInputLayer.currentIndexChanged.connect(self.isochrones_maplayerselection) # Call function isochrones_maplayerselection to update all selection related stuff when selection has been changed
        
        # Calling Functions on button click
        self.dlg.GeneralSettings_SelectSavePath.clicked.connect(self.select_output_folder) #Open file dialog when hitting button
        self.dlg.GeneralSettings_Save.clicked.connect(self.store_variables) #Call store_Variables function when clicking on save button       
        self.dlg.Isochrones_RequestIsochrones.clicked.connect(lambda: self.Isochrones_RequestIsochrones(self.isochrones_selectedLayer, self.Isochrones_Inputlayer_Fieldnames)) #Call Isochrones_RequestIsochrones function when clicking on RequestIsochrones button and handing over isochrones_selectedLayer. lambda function necessary to do this... (Reference: https://gis.stackexchange.com/a/351167/107424)
              
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            #Isochrones_RequestIsochrones()  
            print("OpenTripPlanner Plugin is already running! Close it before, if you wish to restart it.")
            self.iface.messageBar().pushMessage(
            "Error", "OpenTripPlanner Plugin is already running! Close it before, if you wish to restart it.",
            level=Qgis.Critical, duration=3) 
